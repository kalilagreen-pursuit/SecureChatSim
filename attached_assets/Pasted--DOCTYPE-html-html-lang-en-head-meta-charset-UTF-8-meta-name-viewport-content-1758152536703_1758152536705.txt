<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Conversational Playbook Demo</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    fontFamily: {
                        sans: ['Inter', 'sans-serif'],
                    },
                }
            }
        }
    </script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f8fafc;
        }
        .chat-bubble {
            max-width: 85%;
            padding: 1rem;
            border-radius: 1.5rem;
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
            word-wrap: break-word;
        }
    </style>
</head>
<body class="flex items-center justify-center min-h-screen p-4">

    <div class="bg-white rounded-2xl shadow-xl w-full max-w-2xl overflow-hidden flex flex-col h-[80vh]">
        <!-- Header -->
        <div class="bg-white p-4 border-b border-gray-200 flex items-center justify-between">
            <h1 class="text-xl font-bold text-gray-800">Phishing Incident</h1>
            <div class="text-xs text-gray-400">#security-alerts</div>
        </div>

        <!-- Chat Area -->
        <div id="chat-container" class="flex-grow p-4 overflow-y-auto space-y-4">
            <!-- Initial Agent message -->
            <div class="flex items-end space-x-2">
                <div class="flex-shrink-0 w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white font-bold">A</div>
                <div class="chat-bubble bg-gray-100 text-gray-800">
                    <p class="font-semibold mb-2">Agent Synopsis:</p>
                    <p>Alert triggered by a user-reported email. The email's subject is "Urgent Action Required: Password Reset". Initial analysis shows it originated from a known malicious domain. The user has not clicked any links.</p>
                    <p class="mt-4 font-semibold">What would you like to do?</p>
                    <div class="flex flex-col space-y-2 mt-4">
                        <button class="solution-btn bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded-xl transition-colors duration-200" data-solution="1">Quarantine Email & Notify User</button>
                        <button class="solution-btn bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded-xl transition-colors duration-200" data-solution="2">Dismiss as False Positive</button>
                        <button class="solution-btn bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded-xl transition-colors duration-200" data-solution="3">Escalate to Tier 2</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Input Area -->
        <div class="bg-white p-4 border-t border-gray-200 flex items-center">
            <input id="chat-input" type="text" placeholder="Type a message or question..." class="flex-grow rounded-full py-2 px-4 bg-gray-100 border border-transparent focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all duration-200">
            <button id="send-btn" class="ml-2 bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded-full transition-colors duration-200">Send</button>
        </div>
    </div>

    <script>
        // Simple in-memory database to simulate the agent "learning"
        const memoryDB = [];

        // Predefined playbook for agent responses
        const playbook = {
            '1': {
                response: 'Solution "Quarantine Email & Notify User" selected. The email has been quarantined, and an automated notification has been sent to the user. This incident is now resolved.',
                isFinal: true
            },
            '2': {
                response: 'Solution "Dismiss as False Positive" selected. The alert has been closed. No further action will be taken.',
                isFinal: true
            },
            '3': {
                response: 'Solution "Escalate to Tier 2" selected. The incident has been flagged for a senior analyst. Please provide additional context in the chat if needed.',
                isFinal: true
            },
            'default': {
                response: 'I am not sure how to respond to that. Please select one of the provided solutions or provide more context.',
                isFinal: false
            }
        };

        const chatContainer = document.getElementById('chat-container');
        const chatInput = document.getElementById('chat-input');
        const sendBtn = document.getElementById('send-btn');
        const solutionBtns = document.querySelectorAll('.solution-btn');

        // Function to add a new message to the chat container
        const addMessage = (sender, text) => {
            const messageElement = document.createElement('div');
            messageElement.classList.add('flex', 'space-x-2');

            if (sender === 'analyst') {
                messageElement.classList.add('justify-end');
                messageElement.innerHTML = `
                    <div class="chat-bubble bg-blue-500 text-white">
                        <p>${text}</p>
                    </div>
                `;
            } else {
                messageElement.classList.add('items-end');
                messageElement.innerHTML = `
                    <div class="flex-shrink-0 w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center text-white font-bold">A</div>
                    <div class="chat-bubble bg-gray-100 text-gray-800">
                        <p>${text}</p>
                    </div>
                `;
            }
            chatContainer.appendChild(messageElement);
            chatContainer.scrollTop = chatContainer.scrollHeight;
        };

        // Function to handle sending a message
        const sendMessage = () => {
            const message = chatInput.value.trim();
            if (message === '') return;

            addMessage('analyst', message);
            chatInput.value = '';

            // Simulate agent response
            setTimeout(() => {
                const response = playbook['default'].response;
                addMessage('agent', response);
            }, 1000);
        };

        // Function to handle solution button clicks
        const handleSolutionClick = (event) => {
            const solutionId = event.target.dataset.solution;
            const solutionText = event.target.textContent;

            addMessage('analyst', solutionText);

            // Hide buttons once a solution is selected
            solutionBtns.forEach(btn => btn.disabled = true);
            
            // Simulate agent response and database update
            setTimeout(() => {
                const agentResponse = playbook[solutionId].response;
                addMessage('agent', agentResponse);
                
                if (playbook[solutionId].isFinal) {
                    // Simulate storing the final solution in the memory database
                    const incidentData = {
                        incidentId: 'INC-' + Date.now(),
                        initialAlert: 'User-reported phishing email',
                        selectedSolution: solutionText,
                        finalizedAt: new Date().toISOString()
                    };
                    memoryDB.push(incidentData);
                    addMessage('agent', 'Solution finalized and stored in the database for future agent training.');
                    console.log('Memory Database:', memoryDB); // Log to console to show it's working
                }
            }, 1000);
        };
        
        // Event listeners
        sendBtn.addEventListener('click', sendMessage);
        chatInput.addEventListener('keypress', (event) => {
            if (event.key === 'Enter') {
                sendMessage();
            }
        });
        solutionBtns.forEach(btn => btn.addEventListener('click', handleSolutionClick));
    </script>

</body>
</html>
